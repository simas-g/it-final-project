generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CREATOR
  USER
}

enum InventoryAccessType {
  READ
  WRITE
}

enum FieldType {
  SINGLE_LINE_TEXT
  MULTI_LINE_TEXT
  NUMERIC
  DOCUMENT_IMAGE
  BOOLEAN
}

enum CustomIdElementType {
  FIXED_TEXT
  RANDOM_20BIT
  RANDOM_32BIT
  RANDOM_6DIGIT
  RANDOM_9DIGIT
  GUID
  DATE_TIME
  SEQUENCE
}

model UserPreferences {
  id       String @id @default(uuid())
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id])
  language String @default("en")
  theme    String @default("light")
}

model Category {
  id          String      @id @default(uuid())
  name        String      @unique
  inventories Inventory[]
}

model Tag {
  id          String         @id @default(uuid())
  name        String         @unique
  inventories InventoryTag[]
}

model InventoryTag {
  id          String    @id @default(uuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  tagId       String
  tag         Tag       @relation(fields: [tagId], references: [id])

  @@unique([inventoryId, tagId])
}

model InventoryField {
  id          String    @id @default(uuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  title       String
  description String?
  fieldType   FieldType
  columnName  String
  isRequired  Boolean   @default(false)
  showInTable Boolean   @default(true)
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CustomIdConfig {
  id           String            @id @default(uuid())
  inventoryId  String            @unique
  inventory    Inventory         @relation(fields: [inventoryId], references: [id])
  elements     Json
  elementsList CustomIdElement[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model CustomIdElement {
  id          String              @id @default(uuid())
  configId    String
  config      CustomIdConfig      @relation(fields: [configId], references: [id])
  elementType CustomIdElementType
  format      String
  value       String?
  order       Int
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model InventoryAccess {
  id          String              @id @default(uuid())
  inventoryId String
  inventory   Inventory           @relation(fields: [inventoryId], references: [id])
  userId      String
  user        User                @relation(fields: [userId], references: [id])
  accessType  InventoryAccessType @default(READ)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@unique([inventoryId, userId])
}

model DiscussionPost {
  id          String    @id @default(uuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ItemLike {
  id     String        @id @default(uuid())
  itemId String
  item   InventoryItem @relation(fields: [itemId], references: [id])
  userId String
  user   User          @relation(fields: [userId], references: [id])

  @@unique([itemId, userId])
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  name       String?
  password   String?
  provider   String?
  providerId String?
  isBlocked  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  role       UserRole @default(USER)

  preferences     UserPreferences?
  inventories     Inventory[]
  items           InventoryItem[]
  inventoryAccess InventoryAccess[]
  discussionPosts DiscussionPost[]
  itemLikes       ItemLike[]
}

model Inventory {
  id          String    @id @default(uuid())
  name        String
  description String?
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  imageUrl    String?
  isPublic    Boolean   @default(false)
  version     Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])

  items           InventoryItem[]
  inventoryAccess InventoryAccess[]
  inventoryTags   InventoryTag[]
  fields          InventoryField[]
  customIdConfig  CustomIdConfig?
  discussionPosts DiscussionPost[]
}

model InventoryItem {
  id          String    @id @default(uuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  customId    String?
  
  text1       String?
  text2       String?
  text3       String?
  
  multiText1  String?
  multiText2  String?
  multiText3  String?
  
  numeric1    Decimal?
  numeric2    Decimal?
  numeric3    Decimal?
  
  image1      String?
  image2      String?
  image3      String?
  
  boolean1    Boolean?
  boolean2    Boolean?
  boolean3    Boolean?
  
  version     Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  likes       ItemLike[]

  @@unique([inventoryId, customId])
}
